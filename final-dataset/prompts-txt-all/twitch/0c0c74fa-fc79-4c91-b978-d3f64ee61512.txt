
        You are a web performance expert. 
        Based on the following Lighthouse audit issues: 
       
        __________________
        "
            1. viewport => Does not have a `<meta name="viewport">` tag with `width` or `initial-scale`: A `<meta name="viewport">` not only optimizes your app for mobile screen sizes, but also prevents [a 300 millisecond delay to user input](https://developer.chrome.com/blog/300ms-tap-delay-gone-away/). [Learn more about using the viewport meta tag](https://developer.chrome.com/docs/lighthouse/pwa/viewport/).
 

            
            2. first-contentful-paint => First Contentful Paint: First Contentful Paint marks the time at which the first text or image is painted. [Learn more about the First Contentful Paint metric](https://developer.chrome.com/docs/lighthouse/performance/first-contentful-paint/).
 

            
            3. largest-contentful-paint => Largest Contentful Paint: Largest Contentful Paint marks the time at which the largest text or image is painted. [Learn more about the Largest Contentful Paint metric](https://developer.chrome.com/docs/lighthouse/performance/lighthouse-largest-contentful-paint/)
 

            
            4. speed-index => Speed Index: Speed Index shows how quickly the contents of a page are visibly populated. [Learn more about the Speed Index metric](https://developer.chrome.com/docs/lighthouse/performance/speed-index/).
 

            
            5. total-blocking-time => Total Blocking Time: Sum of all time periods between FCP and Time to Interactive, when task length exceeded 50ms, expressed in milliseconds. [Learn more about the Total Blocking Time metric](https://developer.chrome.com/docs/lighthouse/performance/lighthouse-total-blocking-time/).
 

            
            6. max-potential-fid => Max Potential First Input Delay: The maximum potential First Input Delay that your users could experience is the duration of the longest task. [Learn more about the Maximum Potential First Input Delay metric](https://developer.chrome.com/docs/lighthouse/performance/lighthouse-max-potential-fid/).
 

            
            7. cumulative-layout-shift => Cumulative Layout Shift: Cumulative Layout Shift measures the movement of visible elements within the viewport. [Learn more about the Cumulative Layout Shift metric](https://web.dev/articles/cls).
 

            
            8. errors-in-console => Browser errors were logged to the console: Errors logged to the console indicate unresolved problems. They can come from network request failures and other browser concerns. [Learn more about this errors in console diagnostic audit](https://developer.chrome.com/docs/lighthouse/best-practices/errors-in-console/)
 

            
            9. interactive => Time to Interactive: Time to Interactive is the amount of time it takes for the page to become fully interactive. [Learn more about the Time to Interactive metric](https://developer.chrome.com/docs/lighthouse/performance/interactive/).
 

            
            10. deprecations => Uses deprecated APIs: Deprecated APIs will eventually be removed from the browser. [Learn more about deprecated APIs](https://developer.chrome.com/docs/lighthouse/best-practices/deprecations/).
 

            
            11. third-party-cookies => Uses third-party cookies: Support for third-party cookies will be removed in a future version of Chrome. [Learn more about phasing out third-party cookies](https://developer.chrome.com/en/docs/privacy-sandbox/third-party-cookie-phase-out/).
 

            
            12. mainthread-work-breakdown => Minimize main-thread work: Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this. [Learn how to minimize main-thread work](https://developer.chrome.com/docs/lighthouse/performance/mainthread-work-breakdown/)
 

            
            13. bootup-time => Reduce JavaScript execution time: Consider reducing the time spent parsing, compiling, and executing JS. You may find delivering smaller JS payloads helps with this. [Learn how to reduce Javascript execution time](https://developer.chrome.com/docs/lighthouse/performance/bootup-time/).
 

            
            14. font-display => Ensure text remains visible during webfont load: Leverage the `font-display` CSS feature to ensure text is user-visible while webfonts are loading. [Learn more about `font-display`](https://developer.chrome.com/docs/lighthouse/performance/font-display/).
 

            
            15. third-party-summary => Reduce the impact of third-party code: Third-party code can significantly impact load performance. Limit the number of redundant third-party providers and try to load third-party code after your page has primarily finished loading. [Learn how to minimize third-party impact](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript/).
 

            
            16. largest-contentful-paint-element => Largest Contentful Paint element: This is the largest contentful element painted within the viewport. [Learn more about the Largest Contentful Paint element](https://developer.chrome.com/docs/lighthouse/performance/lighthouse-largest-contentful-paint/)
 

            
            17. unsized-images => Image elements do not have explicit `width` and `height`: Set an explicit width and height on image elements to reduce layout shifts and improve CLS. [Learn how to set image dimensions](https://web.dev/articles/optimize-cls#images_without_dimensions)
 

            
            18. uses-long-cache-ttl => Serve static assets with an efficient cache policy: A long cache lifetime can speed up repeat visits to your page. [Learn more about efficient cache policies](https://developer.chrome.com/docs/lighthouse/performance/uses-long-cache-ttl/).
 

            
            19. unused-javascript => Reduce unused JavaScript: Reduce unused JavaScript and defer loading scripts until they are required to decrease bytes consumed by network activity. [Learn how to reduce unused JavaScript](https://developer.chrome.com/docs/lighthouse/performance/unused-javascript/).
 

            
            20. modern-image-formats => Serve images in next-gen formats: Image formats like WebP and AVIF often provide better compression than PNG or JPEG, which means faster downloads and less data consumption. [Learn more about modern image formats](https://developer.chrome.com/docs/lighthouse/performance/uses-webp-images/).
 

            
            21. uses-text-compression => Enable text compression: Text-based resources should be served with compression (gzip, deflate or brotli) to minimize total network bytes. [Learn more about text compression](https://developer.chrome.com/docs/lighthouse/performance/uses-text-compression/).
 

            
            22. uses-responsive-images => Properly size images: Serve images that are appropriately-sized to save cellular data and improve load time. [Learn how to size images](https://developer.chrome.com/docs/lighthouse/performance/uses-responsive-images/).
 

            
            23. legacy-javascript => Avoid serving legacy JavaScript to modern browsers: Polyfills and transforms enable legacy browsers to use new JavaScript features. However, many aren't necessary for modern browsers. For your bundled JavaScript, adopt a modern script deployment strategy using module/nomodule feature detection to reduce the amount of code shipped to modern browsers, while retaining support for legacy browsers. [Learn how to use modern JavaScript](https://web.dev/articles/publish-modern-javascript)
 

            
            24. inspector-issues => Issues were logged in the `Issues` panel in Chrome Devtools: Issues logged to the `Issues` panel in Chrome Devtools indicate unresolved problems. They can come from network request failures, insufficient security controls, and other browser concerns. Open up the Issues panel in Chrome DevTools for more details on each issue.
 

            
            25. uses-passive-event-listeners => Does not use passive listeners to improve scrolling performance: Consider marking your touch and wheel event listeners as `passive` to improve your page's scroll performance. [Learn more about adopting passive event listeners](https://developer.chrome.com/docs/lighthouse/best-practices/uses-passive-event-listeners/).
 

            
            26. font-size => Document doesn't use legible font sizes: Font sizes less than 12px are too small to be legible and require mobile visitors to “pinch to zoom” in order to read. Strive to have >60% of page text ≥12px. [Learn more about legible font sizes](https://developer.chrome.com/docs/lighthouse/seo/font-size/).
 

            "
        __________________

        Due to the huge token size of HTML files, 
        You are given the HTML in chunks, one at a time. 
        Please modify each HTML code chunk to resolve the performance issues given above.

        Make sure you:
        1. Remember the code is split into chunks and you are only receiving one chunk at a time, there might be some unclosed or cut elements, do not worry about that.
        2. Consider that a chunk might be a part of a larger element, so the code might not be complete.
        3. Consider that the HTML as a whole is from production and might be minified, uglified or compressed.
        4. DO NOT modify class names
        5. DO NOT remove any comments already in the code.
        6. DO NOT change any styles or functionalities of the code.
        7. DO NOT change the structure of the code.
        8. DO NOT change the order of the code.
        9. DO NOT remove critical elements.
        10. If any optimizations are made, return `<!-- Optimized by LLM -->` at the beginning point of only the changed portion
           and `<!-- End of Optimization: {audit_key of issue being resolved} => {one line short description of elements/things resolved} -->` at the end of the changed portion. 
           Do not indicate any resolution outside of the End of Optimization comment, where there are multiple resolutions being made, seperate them with commas within the End of optimization comment.
        11. Return the modified HTML code alone, making only necessary changes for performance optimization.
        12. If no optimizations are possible, return the original code.
        13. Never add any additional comments to the code besides that of the instruction in #7.
        14. If the change is within a `<style>` tag, replace the HTML comment with a CSS comment.

        The original HTML code is as follows:

        ```html
        
<div class="root" id="root">
<style data-chunk-uuid="88a88f32-36c1-4785-831d-f40072fd7327">/* chunk_style_88a88f32-36c1-4785-831d-f40072fd7327 */
</style>
<script data-chunk-uuid="56420dda-20b1-44de-8384-1851c14c9b65">// chunk_script_56420dda-20b1-44de-8384-1851c14c9b65
</script>
<div class="shell-nav">
<figure class="shell-nav__logo">
<svg height="40px" version='1.1' viewbox="0 0 40 40" width="40px" x="0px" y="0px">
<g fill-rule="evenodd">
<path d="M19 6v6h-2V6h2zm-7 0h2v6h-2V6zM5 0L0 5v18h6v5l5-5h4l9-9V0H5zm17 13l-4 4h-4l-4 4v-4H6V2h16v11z">
</path>
<path d="M18 17l4-4V2H6v15h4v4l4-4h4zM12 6h2v6h-2V6zm7 0h-2v6h2V6z" fill="#FFF">
</path>
</g>
</svg>
</figure>
<div class="shell-nav__link-list">
<div class="shell-nav__link shell-nav__link--discovery">
</div>
<div class="shell-nav__link shell-nav__link--follow">
</div>
<div class="shell-nav__link shell-nav__link--browse">
</div>
</div>
<div class="shell-nav__ellipsis">
<figure class="shell__svg--navmore">
<svg height="20px" version='1.1' viewbox="0 0 20 20" width="20px" x="0px" y="0px">
<path d="M4 8a2 2 0 1 1 0 4 2 2 0 0 1 0-4zm6 0a2 2 0 1 1 0 4 2 2 0 0 1 0-4zm6 0a2 2 0 1 1 0 4 2 2 0 0 1 0-4z" fill-rule="evenodd">
</path>
</svg>
</figure>
</div>
<div class="shell-nav__search-container">
<div class="shell-nav__search">
</div>
</div>
<div class="shell-nav__user-auth">
<div class="shell-nav__user-auth-button shell-nav__user-auth-button--login">
</div>
<div class="shell-nav__user-auth-button shell-nav__user-auth-button--singup">
</div>
</div>
<div class="shell-nav__user-card">
<div class="shell-nav__user-card-avatar">
</div>
</div>
</div>
<div class="shell-loader" data-a-target="shell-loader">
<div class="shell-loader__spinner">
</div>
</div>
</div>
<script data-chunk-uuid="0e7acfe7-4dcf-422a-94a1-734e6dfc31a2">// chunk_script_0e7acfe7-4dcf-422a-94a1-734e6dfc31a2
</script>
<script data-chunk-uuid="f6f53d43-9b4f-4a56-b28c-4c9d617e6339" crossorigin="anonymous" src="https://assets.twitch.tv/config/settings.ffe973d9a7cbf13a845a23a2598caf27.js">// chunk_script_f6f53d43-9b4f-4a56-b28c-4c9d617e6339
</script>
<script data-chunk-uuid="1b2e24af-495e-42cf-b005-316e0cf5ebba">// chunk_script_1b2e24af-495e-42cf-b005-316e0cf5ebba
</script>
<link href="https://assets.twitch.tv/assets/core-0afbcdeaff154d87e89d.css" rel="stylesheet"></link>
<script data-chunk-uuid="e8cc5f31-ae9a-49e4-92f1-5a4cfc981323">// chunk_script_e8cc5f31-ae9a-49e4-92f1-5a4cfc981323
</script>
<script data-chunk-uuid="c3306213-058b-4175-bc69-3b75227bd168" src="https://assets.twitch.tv/assets/vendor-5a3405cf3be13d3fb193.js">// chunk_script_c3306213-058b-4175-bc69-3b75227bd168
</script>
<script data-chunk-uuid="e7e92486-8652-47f6-bf26-d8b13ac51d3f" nomodule="" src="https://assets.twitch.tv/assets/nomodulePolyfills-46100576e19cbb82aad7.js">// chunk_script_e7e92486-8652-47f6-bf26-d8b13ac51d3f
</script>
<script data-chunk-uuid="61603402-1e6e-40ee-99aa-45d8c3c6208c" src="https://assets.twitch.tv/assets/polyfills-cc5b9bf3b3f7bc813c6c.js">// chunk_script_61603402-1e6e-40ee-99aa-45d8c3c6208c
</script>
<script data-chunk-uuid="07fb0567-9563-4de6-a559-990d7c9003b9" src="https://assets.twitch.tv/assets/core-6770001ba32ecc8e7c53.js">// chunk_script_07fb0567-9563-4de6-a559-990d7c9003b9
</script>

        ```
        